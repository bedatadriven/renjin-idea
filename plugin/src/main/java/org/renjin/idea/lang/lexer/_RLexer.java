/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

/** From the r4intellij project **/

package org.renjin.idea.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static org.renjin.idea.psi.RTypes.*;


import com.intellij.util.containers.Stack;
import org.renjin.idea.psi.RTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>R.flex</tt>
 */
public class _RLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\74\1\2\1\1\22\0\1\2\1\54\1\16\1\3\1\70\1\65\1\60\1\17\1\46"+
    "\1\47\1\64\1\12\1\45\1\62\1\13\1\66\1\6\11\7\1\44\1\43\1\57\1\55\1\56\1\73"+
    "\1\72\4\4\1\11\6\4\1\10\1\4\1\41\5\4\1\71\1\42\5\4\1\52\1\15\1\53\1\67\1\5"+
    "\1\0\1\35\1\34\1\23\1\4\1\32\1\20\1\4\1\30\1\14\1\4\1\36\1\31\1\4\1\22\1\25"+
    "\1\40\1\4\1\26\1\33\1\24\1\21\1\4\1\27\1\37\2\4\1\50\1\61\1\51\1\63\6\0\1"+
    "\74\242\0\2\74\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\1\3\1\4\1\5\2\6\1\7"+
    "\2\5\2\10\7\5\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\2\4\1\0\2\6\2\5\1\41"+
    "\1\42\3\10\10\5\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\0\1\52\1\53\1\54\1\55\3\0"+
    "\1\33\1\4\1\6\1\0\1\5\1\56\1\5\1\57"+
    "\6\5\1\60\1\61\1\62\1\63\1\4\1\5\1\64"+
    "\2\5\1\65\1\5\1\66\1\4\2\5\1\67\1\70"+
    "\1\0\1\4\1\5\1\71\1\0\1\4\1\5\1\72"+
    "\1\4\1\73\160\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\75\0\267\0\364\0\u0131\0\u016e"+
    "\0\75\0\u01ab\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319"+
    "\0\u0356\0\u0393\0\u03d0\0\u040d\0\75\0\u044a\0\75\0\75"+
    "\0\75\0\75\0\75\0\u0487\0\u04c4\0\u0501\0\u053e\0\u057b"+
    "\0\u05b8\0\u05f5\0\u0632\0\u066f\0\75\0\75\0\u06ac\0\75"+
    "\0\75\0\75\0\75\0\75\0\u06e9\0\u0726\0\u0763\0\u07a0"+
    "\0\75\0\u07dd\0\u081a\0\364\0\364\0\u0857\0\75\0\u0894"+
    "\0\u08d1\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c"+
    "\0\u0ab9\0\75\0\75\0\75\0\75\0\75\0\75\0\u0af6"+
    "\0\75\0\75\0\75\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\75"+
    "\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\364\0\u0d1b\0\364\0\u0d58"+
    "\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\75\0\75\0\75"+
    "\0\75\0\u0ec6\0\u0f03\0\364\0\u0f40\0\u0f7d\0\364\0\u0fba"+
    "\0\364\0\u0ff7\0\u1034\0\u1071\0\364\0\364\0\u10ae\0\u10eb"+
    "\0\u1128\0\364\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259\0\364"+
    "\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441"+
    "\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629"+
    "\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811"+
    "\0\u184e\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9"+
    "\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1"+
    "\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9"+
    "\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u1fb1"+
    "\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199"+
    "\0\u21d6\0\u2213\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344\0\u2381"+
    "\0\u23be\0\u23fb\0\u2438\0\u2475\0\u24b2\0\u24ef\0\u252c\0\u2569"+
    "\0\u25a6\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7\0\u2714\0\u2751"+
    "\0\u278e\0\u27cb\0\u2808\0\u2845\0\u2882\0\u28bf\0\u28fc\0\u2939"+
    "\0\u2976\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21"+
    "\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc\0\u2d09";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\2\6\1\11\1\12\1\13\1\2\1\14\1\15\1\16"+
    "\1\6\1\17\3\6\1\20\1\21\2\6\1\22\1\6"+
    "\1\23\4\6\1\24\1\6\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\6\1\53\1\54\77\0\1\3\73\0"+
    "\1\55\1\0\1\55\1\56\71\55\4\0\6\6\1\0"+
    "\2\6\3\0\23\6\26\0\1\6\11\0\2\7\1\0"+
    "\1\57\1\0\1\60\1\61\15\0\1\57\50\0\2\10"+
    "\1\61\1\57\1\0\1\60\1\61\15\0\1\57\46\0"+
    "\2\6\2\62\2\6\1\0\1\63\1\6\3\0\23\6"+
    "\26\0\1\6\7\0\6\6\1\0\2\6\3\0\1\64"+
    "\1\6\1\65\20\6\26\0\1\6\3\0\15\14\1\66"+
    "\1\67\56\14\15\15\1\70\1\15\1\67\55\15\4\0"+
    "\6\6\1\0\2\6\3\0\1\6\1\71\3\6\1\72"+
    "\15\6\26\0\1\6\7\0\6\6\1\0\2\6\3\0"+
    "\12\6\1\73\10\6\26\0\1\6\7\0\6\6\1\0"+
    "\2\6\3\0\12\6\1\74\10\6\26\0\1\6\7\0"+
    "\6\6\1\0\2\6\3\0\10\6\1\75\12\6\26\0"+
    "\1\6\7\0\6\6\1\0\2\6\3\0\11\6\1\76"+
    "\11\6\26\0\1\6\7\0\6\6\1\0\2\6\3\0"+
    "\6\6\1\77\14\6\26\0\1\6\7\0\6\6\1\0"+
    "\2\6\3\0\22\6\1\100\26\0\1\6\47\0\1\101"+
    "\102\0\1\102\75\0\1\103\76\0\1\104\74\0\1\105"+
    "\74\0\1\106\74\0\1\107\1\0\1\110\2\0\1\111"+
    "\72\0\1\112\75\0\1\113\71\0\1\114\30\0\1\115"+
    "\1\0\1\116\10\0\1\115\11\0\1\115\16\0\1\115"+
    "\1\117\4\0\1\115\1\120\1\115\1\0\1\115\1\117"+
    "\3\0\1\55\1\0\74\55\1\0\1\55\1\121\71\55"+
    "\6\0\2\122\2\0\1\123\47\0\1\123\20\0\2\60"+
    "\1\0\1\57\2\0\1\61\15\0\1\57\46\0\2\6"+
    "\2\62\1\6\1\124\1\0\2\6\3\0\12\6\1\124"+
    "\10\6\26\0\1\6\7\0\6\6\1\0\1\125\1\6"+
    "\3\0\23\6\26\0\1\6\3\0\1\14\1\0\73\14"+
    "\1\15\1\0\73\15\4\0\6\6\1\0\2\6\3\0"+
    "\2\6\1\126\20\6\26\0\1\6\7\0\6\6\1\0"+
    "\2\6\3\0\6\6\1\127\14\6\26\0\1\6\7\0"+
    "\6\6\1\0\2\6\3\0\17\6\1\130\3\6\26\0"+
    "\1\6\7\0\6\6\1\0\2\6\3\0\20\6\1\131"+
    "\2\6\26\0\1\6\7\0\6\6\1\0\1\6\1\132"+
    "\3\0\23\6\26\0\1\6\7\0\6\6\1\0\2\6"+
    "\3\0\13\6\1\133\7\6\26\0\1\6\7\0\6\6"+
    "\1\0\2\6\3\0\12\6\1\134\10\6\26\0\1\6"+
    "\7\0\4\6\1\135\1\6\1\0\2\6\3\0\23\6"+
    "\26\0\1\6\47\0\1\136\112\0\1\137\70\0\1\140"+
    "\103\0\1\141\31\0\1\115\130\0\1\115\16\0\1\55"+
    "\1\0\1\55\1\142\71\55\6\0\2\122\4\0\1\61"+
    "\66\0\2\122\71\0\6\6\1\123\2\6\3\0\23\6"+
    "\17\0\1\123\6\0\1\6\7\0\6\6\1\0\2\6"+
    "\3\0\3\6\1\143\17\6\26\0\1\6\7\0\6\6"+
    "\1\0\2\6\3\0\4\6\1\144\16\6\26\0\1\6"+
    "\7\0\6\6\1\0\2\6\3\0\12\6\1\145\10\6"+
    "\26\0\1\6\7\0\6\6\1\0\2\6\3\0\11\6"+
    "\1\146\11\6\26\0\1\6\7\0\6\6\1\0\2\6"+
    "\3\0\12\6\1\147\10\6\26\0\1\6\7\0\6\6"+
    "\1\0\2\6\3\0\15\6\1\150\5\6\26\0\1\6"+
    "\7\0\4\6\1\151\1\6\1\0\2\6\3\0\23\6"+
    "\26\0\1\6\3\0\1\55\1\0\1\55\1\152\71\55"+
    "\4\0\6\6\1\0\2\6\3\0\4\6\1\153\16\6"+
    "\26\0\1\6\7\0\6\6\1\0\2\6\3\0\15\6"+
    "\1\154\5\6\26\0\1\6\7\0\6\6\1\0\2\6"+
    "\3\0\12\6\1\155\10\6\26\0\1\6\7\0\6\6"+
    "\1\0\2\6\3\0\16\6\1\156\4\6\26\0\1\6"+
    "\3\0\1\55\1\157\1\55\1\160\71\55\4\0\6\6"+
    "\1\0\1\6\1\161\3\0\23\6\26\0\1\6\7\0"+
    "\6\6\1\0\2\6\3\0\4\6\1\162\16\6\26\0"+
    "\1\6\6\0\1\163\71\0\1\55\1\157\1\55\1\164"+
    "\71\55\4\0\6\6\1\0\2\6\3\0\5\6\1\165"+
    "\15\6\26\0\1\6\6\0\1\166\71\0\1\55\1\157"+
    "\1\55\1\167\71\55\4\0\6\6\1\0\2\6\3\0"+
    "\2\6\1\170\20\6\26\0\1\6\3\0\1\166\1\0"+
    "\73\166\1\55\1\157\1\55\1\171\72\55\1\157\1\55"+
    "\1\172\72\55\1\157\1\55\1\173\72\55\1\157\1\55"+
    "\1\174\72\55\1\157\1\55\1\175\72\55\1\157\1\55"+
    "\1\176\72\55\1\157\1\55\1\177\72\55\1\157\1\55"+
    "\1\200\72\55\1\157\1\55\1\201\72\55\1\157\1\55"+
    "\1\202\72\55\1\157\1\55\1\203\72\55\1\157\1\55"+
    "\1\204\72\55\1\157\1\55\1\205\72\55\1\157\1\55"+
    "\1\206\72\55\1\157\1\55\1\207\72\55\1\157\1\55"+
    "\1\210\72\55\1\157\1\55\1\211\72\55\1\157\1\55"+
    "\1\212\72\55\1\157\1\55\1\213\72\55\1\157\1\55"+
    "\1\214\72\55\1\157\1\55\1\215\72\55\1\157\1\55"+
    "\1\216\72\55\1\157\1\55\1\217\72\55\1\157\1\55"+
    "\1\220\72\55\1\157\1\55\1\221\72\55\1\157\1\55"+
    "\1\222\72\55\1\157\1\55\1\223\72\55\1\157\1\55"+
    "\1\224\72\55\1\157\1\55\1\225\72\55\1\157\1\55"+
    "\1\226\72\55\1\157\1\55\1\227\72\55\1\157\1\55"+
    "\1\230\72\55\1\157\1\55\1\231\72\55\1\157\1\55"+
    "\1\232\72\55\1\157\1\55\1\233\72\55\1\157\1\55"+
    "\1\234\72\55\1\157\1\55\1\235\72\55\1\157\1\55"+
    "\1\236\72\55\1\157\1\55\1\237\72\55\1\157\1\55"+
    "\1\240\72\55\1\157\1\55\1\241\72\55\1\157\1\55"+
    "\1\242\72\55\1\157\1\55\1\243\72\55\1\157\1\55"+
    "\1\244\72\55\1\157\1\55\1\245\72\55\1\157\1\55"+
    "\1\246\72\55\1\157\1\55\1\247\72\55\1\157\1\55"+
    "\1\250\72\55\1\157\1\55\1\251\72\55\1\157\1\55"+
    "\1\252\72\55\1\157\1\55\1\253\72\55\1\157\1\55"+
    "\1\254\72\55\1\157\1\55\1\255\72\55\1\157\1\55"+
    "\1\256\72\55\1\157\1\55\1\257\72\55\1\157\1\55"+
    "\1\260\72\55\1\157\1\55\1\261\72\55\1\157\1\55"+
    "\1\262\72\55\1\157\1\55\1\263\72\55\1\157\1\55"+
    "\1\264\72\55\1\157\1\55\1\265\72\55\1\157\1\55"+
    "\1\266\72\55\1\157\1\55\1\267\72\55\1\157\1\55"+
    "\1\270\72\55\1\157\1\55\1\271\72\55\1\157\1\55"+
    "\1\272\72\55\1\157\1\55\1\273\72\55\1\157\1\55"+
    "\1\274\72\55\1\157\1\55\1\275\72\55\1\157\1\55"+
    "\1\276\72\55\1\157\1\55\1\277\72\55\1\157\1\55"+
    "\1\300\72\55\1\157\1\55\1\301\72\55\1\157\1\55"+
    "\1\302\72\55\1\157\1\55\1\303\72\55\1\157\1\55"+
    "\1\304\72\55\1\157\1\55\1\305\72\55\1\157\1\55"+
    "\1\306\72\55\1\157\1\55\1\307\72\55\1\157\1\55"+
    "\1\310\72\55\1\157\1\55\1\311\72\55\1\157\1\55"+
    "\1\312\72\55\1\157\1\55\1\313\72\55\1\157\1\55"+
    "\1\314\72\55\1\157\1\55\1\315\72\55\1\157\1\55"+
    "\1\316\72\55\1\157\1\55\1\317\72\55\1\157\1\55"+
    "\1\320\72\55\1\157\1\55\1\321\72\55\1\157\1\55"+
    "\1\322\72\55\1\157\1\55\1\323\72\55\1\157\1\55"+
    "\1\324\72\55\1\157\1\55\1\325\72\55\1\157\1\55"+
    "\1\326\72\55\1\157\1\55\1\327\72\55\1\157\1\55"+
    "\1\330\72\55\1\157\1\55\1\331\72\55\1\157\1\55"+
    "\1\332\72\55\1\157\1\55\1\333\72\55\1\157\1\55"+
    "\1\334\72\55\1\157\1\55\1\335\72\55\1\157\1\55"+
    "\1\336\72\55\1\157\1\55\1\337\72\55\1\157\1\55"+
    "\1\340\72\55\1\157\1\55\1\341\72\55\1\157\1\55"+
    "\1\342\72\55\1\157\1\55\1\343\72\55\1\157\1\55"+
    "\1\344\72\55\1\157\1\55\1\345\72\55\1\157\1\55"+
    "\1\346\72\55\1\157\1\55\1\347\72\55\1\157\1\55"+
    "\1\350\72\55\1\157\73\55";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11590];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\4\1\1\11\13\1\1\11"+
    "\1\1\5\11\11\1\2\11\1\1\5\11\2\1\1\0"+
    "\1\1\1\11\5\1\1\11\12\1\6\11\1\0\3\11"+
    "\1\1\3\0\1\11\2\1\1\0\12\1\4\11\15\1"+
    "\1\0\3\1\1\0\165\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  //helper
  long yychar = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _RLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(YYINITIAL); return R_EOL;
            }
          case 60: break;
          case 2: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 61: break;
          case 3: 
            { yybegin(YYINITIAL); return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 62: break;
          case 4: 
            { yybegin(YYINITIAL); return R_COMMENT;
            }
          case 63: break;
          case 5: 
            { yybegin(YYINITIAL); return RTypes.R_SYMBOL;
            }
          case 64: break;
          case 6: 
            { return R_NUM_CONST;
            }
          case 65: break;
          case 7: 
            { return R_ARITH_PLUS;
            }
          case 66: break;
          case 8: 
            { yybegin(YYINITIAL); return RTypes.R_STR_CONST;
            }
          case 67: break;
          case 9: 
            { yybegin(YYINITIAL); return RTypes.R_SEMICOLON;
            }
          case 68: break;
          case 10: 
            { yybegin(YYINITIAL); return R_COLON;
            }
          case 69: break;
          case 11: 
            { yybegin(YYINITIAL); return R_COMMA;
            }
          case 70: break;
          case 12: 
            { yybegin(YYINITIAL); return RTypes.R_LEFT_PAREN;
            }
          case 71: break;
          case 13: 
            { yybegin(YYINITIAL); return RTypes.R_RIGHT_PAREN;
            }
          case 72: break;
          case 14: 
            { yybegin(YYINITIAL); return RTypes.R_LEFT_BRACE;
            }
          case 73: break;
          case 15: 
            { yybegin(YYINITIAL); return RTypes.R_RIGHT_BRACE;
            }
          case 74: break;
          case 16: 
            { yybegin(YYINITIAL); return RTypes.R_LEFT_BRACKET;
            }
          case 75: break;
          case 17: 
            { yybegin(YYINITIAL); return RTypes.R_RIGHT_BRACKET;
            }
          case 76: break;
          case 18: 
            { return R_NEGATION;
            }
          case 77: break;
          case 19: 
            { return R_EQ_ASSIGN;
            }
          case 78: break;
          case 20: 
            { return R_GT;
            }
          case 79: break;
          case 21: 
            { return R_LT;
            }
          case 80: break;
          case 22: 
            { return R_AND;
            }
          case 81: break;
          case 23: 
            { return R_OR;
            }
          case 82: break;
          case 24: 
            { return R_ARITH_MINUS;
            }
          case 83: break;
          case 25: 
            { return R_TILDE;
            }
          case 84: break;
          case 26: 
            { return R_ARITH_MULT;
            }
          case 85: break;
          case 27: 
            { return R_ARITH_MOD;
            }
          case 86: break;
          case 28: 
            { return R_ARITH_DIV;
            }
          case 87: break;
          case 29: 
            { return R_ARITH_EXPONENTIAION;
            }
          case 88: break;
          case 30: 
            { return R_LIST_SUBSET;
            }
          case 89: break;
          case 31: 
            { return R_SLOT;
            }
          case 90: break;
          case 32: 
            { return R_QUESTION;
            }
          case 91: break;
          case 33: 
            { return R_IF;
            }
          case 92: break;
          case 34: 
            { return R_IN;
            }
          case 93: break;
          case 35: 
            { yybegin(YYINITIAL); return RTypes.R_NS_GET;
            }
          case 94: break;
          case 36: 
            { yybegin(YYINITIAL); return RTypes.R_LBB;
            }
          case 95: break;
          case 37: 
            { yybegin(YYINITIAL); return RTypes.R_RBB;
            }
          case 96: break;
          case 38: 
            { return R_NE;
            }
          case 97: break;
          case 39: 
            { return R_EQ;
            }
          case 98: break;
          case 40: 
            { return R_GE;
            }
          case 99: break;
          case 41: 
            { return R_LE;
            }
          case 100: break;
          case 42: 
            { return R_LEFT_ASSIGN;
            }
          case 101: break;
          case 43: 
            { return R_AND2;
            }
          case 102: break;
          case 44: 
            { return R_OR2;
            }
          case 103: break;
          case 45: 
            { return R_RIGHT_ASSIGN;
            }
          case 104: break;
          case 46: 
            { return R_SYMBOL_FORMALS;
            }
          case 105: break;
          case 47: 
            { return R_FOR;
            }
          case 106: break;
          case 48: 
            { yybegin(YYINITIAL); return RTypes.R_NS_GET_INT;
            }
          case 107: break;
          case 49: 
            { return R_GLOBAL_LEFT_ASSIGN;
            }
          case 108: break;
          case 50: 
            { return R_GLOBAL_RIGHT_ASSIGN;
            }
          case 109: break;
          case 51: 
            { return R_ARITH_MISC;
            }
          case 110: break;
          case 52: 
            { return R_NEXT;
            }
          case 111: break;
          case 53: 
            { return R_ELSE;
            }
          case 112: break;
          case 54: 
            { return R_NULL_CONST;
            }
          case 113: break;
          case 55: 
            { return R_WHILE;
            }
          case 114: break;
          case 56: 
            { return R_BREAK;
            }
          case 115: break;
          case 57: 
            { return R_REPEAT;
            }
          case 116: break;
          case 58: 
            { yybegin(YYINITIAL); return R_SECTION_COMMENT;
            }
          case 117: break;
          case 59: 
            { return R_FUNCTION;
            }
          case 118: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
