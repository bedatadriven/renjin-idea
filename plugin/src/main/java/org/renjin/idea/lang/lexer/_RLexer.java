/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/** From the r4intellij project **/

package org.renjin.idea.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.renjin.idea.psi.RTypes;

import static org.renjin.idea.psi.RTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>R.flex</tt>
 */
public class _RLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\75\1\2\1\1\22\0\1\2\1\55\1\17\1\3\1\71\1\66\1\61\1\20\1\47"+
    "\1\50\1\65\1\13\1\46\1\63\1\14\1\67\1\7\11\10\1\45\1\44\1\60\1\56\1\57\1\74"+
    "\1\73\4\4\1\12\6\4\1\11\1\4\1\42\5\4\1\72\1\43\5\4\1\53\1\16\1\54\1\70\1\5"+
    "\1\6\1\36\1\35\1\24\1\4\1\33\1\21\1\4\1\31\1\15\1\4\1\37\1\32\1\4\1\23\1\26"+
    "\1\41\1\4\1\27\1\34\1\25\1\22\1\4\1\30\1\40\2\4\1\51\1\62\1\52\1\64\6\0\1"+
    "\75\242\0\2\75\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\1\3\1\4\1\5\1\2\2\6"+
    "\1\7\2\5\2\10\7\5\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\2\4\2\0\2\6\2\5"+
    "\1\41\1\42\3\10\10\5\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\0\1\52\1\53\1\54\1\55"+
    "\3\0\1\33\1\4\1\5\1\6\1\0\1\5\1\56"+
    "\1\5\1\57\6\5\1\60\1\61\1\62\1\63\1\4"+
    "\1\5\1\64\2\5\1\65\1\5\1\66\1\4\2\5"+
    "\1\67\1\70\1\0\1\4\1\5\1\71\1\0\1\4"+
    "\1\5\1\72\1\4\1\73\160\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\76\0\272\0\370\0\u0136\0\u0174"+
    "\0\u01b2\0\76\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326"+
    "\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c\0\76\0\u049a\0\76"+
    "\0\76\0\76\0\76\0\76\0\u04d8\0\u0516\0\u0554\0\u0592"+
    "\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\76\0\76\0\u0706"+
    "\0\76\0\76\0\76\0\76\0\76\0\u0744\0\u0782\0\u07c0"+
    "\0\u07fe\0\u083c\0\76\0\u087a\0\u08b8\0\370\0\370\0\u08f6"+
    "\0\76\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8"+
    "\0\u0ae6\0\u0b24\0\u0b62\0\76\0\76\0\76\0\76\0\76"+
    "\0\76\0\u0ba0\0\76\0\76\0\76\0\u0bde\0\u0c1c\0\u0c5a"+
    "\0\u0c98\0\76\0\u0cd6\0\76\0\u0d14\0\u0d52\0\u0d90\0\370"+
    "\0\u0dce\0\370\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42"+
    "\0\76\0\76\0\76\0\76\0\u0f80\0\u0fbe\0\370\0\u0ffc"+
    "\0\u103a\0\370\0\u1078\0\370\0\u10b6\0\u10f4\0\u1132\0\370"+
    "\0\370\0\u1170\0\u11ae\0\u11ec\0\370\0\u122a\0\u1268\0\u12a6"+
    "\0\u12e4\0\u1322\0\370\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458"+
    "\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648"+
    "\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838"+
    "\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28"+
    "\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18"+
    "\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08"+
    "\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8"+
    "\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8"+
    "\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u239a\0\u23d8"+
    "\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8"+
    "\0\u2606\0\u2644\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u277a\0\u27b8"+
    "\0\u27f6\0\u2834\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a\0\u29a8"+
    "\0\u29e6\0\u2a24\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98"+
    "\0\u2bd6\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88"+
    "\0\u2dc6\0\u2e04\0\u2e42";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\2\6\1\12\1\13\1\14\1\2\1\15\1\16"+
    "\1\17\1\6\1\20\3\6\1\21\1\22\2\6\1\23"+
    "\1\6\1\24\4\6\1\25\1\6\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\6\1\54\1\55\100\0\1\3"+
    "\74\0\1\56\1\0\1\56\1\57\72\56\4\0\2\6"+
    "\1\0\4\6\1\0\2\6\3\0\23\6\26\0\1\6"+
    "\3\0\1\60\1\0\4\60\1\0\67\60\7\0\2\10"+
    "\1\0\1\61\1\0\1\62\1\63\15\0\1\61\51\0"+
    "\2\11\1\63\1\61\1\0\1\62\1\63\15\0\1\61"+
    "\46\0\2\6\1\0\2\64\2\6\1\0\1\65\1\6"+
    "\3\0\23\6\26\0\1\6\7\0\2\6\1\0\4\6"+
    "\1\0\2\6\3\0\1\66\1\6\1\67\20\6\26\0"+
    "\1\6\3\0\16\15\1\70\1\71\56\15\16\16\1\72"+
    "\1\16\1\71\55\16\4\0\2\6\1\0\4\6\1\0"+
    "\2\6\3\0\1\6\1\73\3\6\1\74\15\6\26\0"+
    "\1\6\7\0\2\6\1\0\4\6\1\0\2\6\3\0"+
    "\12\6\1\75\10\6\26\0\1\6\7\0\2\6\1\0"+
    "\4\6\1\0\2\6\3\0\12\6\1\76\10\6\26\0"+
    "\1\6\7\0\2\6\1\0\4\6\1\0\2\6\3\0"+
    "\10\6\1\77\12\6\26\0\1\6\7\0\2\6\1\0"+
    "\4\6\1\0\2\6\3\0\11\6\1\100\11\6\26\0"+
    "\1\6\7\0\2\6\1\0\4\6\1\0\2\6\3\0"+
    "\6\6\1\101\14\6\26\0\1\6\7\0\2\6\1\0"+
    "\4\6\1\0\2\6\3\0\22\6\1\102\26\0\1\6"+
    "\50\0\1\103\103\0\1\104\76\0\1\105\77\0\1\106"+
    "\75\0\1\107\75\0\1\110\75\0\1\111\1\0\1\112"+
    "\2\0\1\113\73\0\1\114\76\0\1\115\72\0\1\116"+
    "\31\0\1\117\1\0\1\120\10\0\1\117\11\0\1\117"+
    "\16\0\1\117\1\121\4\0\1\117\1\122\1\117\1\0"+
    "\1\117\1\121\3\0\1\56\1\0\75\56\1\0\1\56"+
    "\1\123\72\56\1\60\1\0\4\60\1\124\67\60\7\0"+
    "\2\125\2\0\1\126\47\0\1\126\21\0\2\62\1\0"+
    "\1\61\2\0\1\63\15\0\1\61\46\0\2\6\1\0"+
    "\2\64\1\6\1\127\1\0\2\6\3\0\12\6\1\127"+
    "\10\6\26\0\1\6\7\0\2\6\1\0\4\6\1\0"+
    "\1\130\1\6\3\0\23\6\26\0\1\6\3\0\1\15"+
    "\1\0\74\15\1\16\1\0\74\16\4\0\2\6\1\0"+
    "\4\6\1\0\2\6\3\0\2\6\1\131\20\6\26\0"+
    "\1\6\7\0\2\6\1\0\4\6\1\0\2\6\3\0"+
    "\6\6\1\132\14\6\26\0\1\6\7\0\2\6\1\0"+
    "\4\6\1\0\2\6\3\0\17\6\1\133\3\6\26\0"+
    "\1\6\7\0\2\6\1\0\4\6\1\0\2\6\3\0"+
    "\20\6\1\134\2\6\26\0\1\6\7\0\2\6\1\0"+
    "\4\6\1\0\1\6\1\135\3\0\23\6\26\0\1\6"+
    "\7\0\2\6\1\0\4\6\1\0\2\6\3\0\13\6"+
    "\1\136\7\6\26\0\1\6\7\0\2\6\1\0\4\6"+
    "\1\0\2\6\3\0\12\6\1\137\10\6\26\0\1\6"+
    "\7\0\2\6\1\0\2\6\1\140\1\6\1\0\2\6"+
    "\3\0\23\6\26\0\1\6\50\0\1\141\113\0\1\142"+
    "\71\0\1\143\104\0\1\144\32\0\1\117\131\0\1\117"+
    "\16\0\1\56\1\0\1\56\1\145\72\56\7\0\2\125"+
    "\4\0\1\63\67\0\2\125\71\0\2\6\1\0\4\6"+
    "\1\126\2\6\3\0\23\6\17\0\1\126\6\0\1\6"+
    "\7\0\2\6\1\0\4\6\1\0\2\6\3\0\3\6"+
    "\1\146\17\6\26\0\1\6\7\0\2\6\1\0\4\6"+
    "\1\0\2\6\3\0\4\6\1\147\16\6\26\0\1\6"+
    "\7\0\2\6\1\0\4\6\1\0\2\6\3\0\12\6"+
    "\1\150\10\6\26\0\1\6\7\0\2\6\1\0\4\6"+
    "\1\0\2\6\3\0\11\6\1\151\11\6\26\0\1\6"+
    "\7\0\2\6\1\0\4\6\1\0\2\6\3\0\12\6"+
    "\1\152\10\6\26\0\1\6\7\0\2\6\1\0\4\6"+
    "\1\0\2\6\3\0\15\6\1\153\5\6\26\0\1\6"+
    "\7\0\2\6\1\0\2\6\1\154\1\6\1\0\2\6"+
    "\3\0\23\6\26\0\1\6\3\0\1\56\1\0\1\56"+
    "\1\155\72\56\4\0\2\6\1\0\4\6\1\0\2\6"+
    "\3\0\4\6\1\156\16\6\26\0\1\6\7\0\2\6"+
    "\1\0\4\6\1\0\2\6\3\0\15\6\1\157\5\6"+
    "\26\0\1\6\7\0\2\6\1\0\4\6\1\0\2\6"+
    "\3\0\12\6\1\160\10\6\26\0\1\6\7\0\2\6"+
    "\1\0\4\6\1\0\2\6\3\0\16\6\1\161\4\6"+
    "\26\0\1\6\3\0\1\56\1\162\1\56\1\163\72\56"+
    "\4\0\2\6\1\0\4\6\1\0\1\6\1\164\3\0"+
    "\23\6\26\0\1\6\7\0\2\6\1\0\4\6\1\0"+
    "\2\6\3\0\4\6\1\165\16\6\26\0\1\6\6\0"+
    "\1\166\72\0\1\56\1\162\1\56\1\167\72\56\4\0"+
    "\2\6\1\0\4\6\1\0\2\6\3\0\5\6\1\170"+
    "\15\6\26\0\1\6\6\0\1\171\72\0\1\56\1\162"+
    "\1\56\1\172\72\56\4\0\2\6\1\0\4\6\1\0"+
    "\2\6\3\0\2\6\1\173\20\6\26\0\1\6\3\0"+
    "\1\171\1\0\74\171\1\56\1\162\1\56\1\174\73\56"+
    "\1\162\1\56\1\175\73\56\1\162\1\56\1\176\73\56"+
    "\1\162\1\56\1\177\73\56\1\162\1\56\1\200\73\56"+
    "\1\162\1\56\1\201\73\56\1\162\1\56\1\202\73\56"+
    "\1\162\1\56\1\203\73\56\1\162\1\56\1\204\73\56"+
    "\1\162\1\56\1\205\73\56\1\162\1\56\1\206\73\56"+
    "\1\162\1\56\1\207\73\56\1\162\1\56\1\210\73\56"+
    "\1\162\1\56\1\211\73\56\1\162\1\56\1\212\73\56"+
    "\1\162\1\56\1\213\73\56\1\162\1\56\1\214\73\56"+
    "\1\162\1\56\1\215\73\56\1\162\1\56\1\216\73\56"+
    "\1\162\1\56\1\217\73\56\1\162\1\56\1\220\73\56"+
    "\1\162\1\56\1\221\73\56\1\162\1\56\1\222\73\56"+
    "\1\162\1\56\1\223\73\56\1\162\1\56\1\224\73\56"+
    "\1\162\1\56\1\225\73\56\1\162\1\56\1\226\73\56"+
    "\1\162\1\56\1\227\73\56\1\162\1\56\1\230\73\56"+
    "\1\162\1\56\1\231\73\56\1\162\1\56\1\232\73\56"+
    "\1\162\1\56\1\233\73\56\1\162\1\56\1\234\73\56"+
    "\1\162\1\56\1\235\73\56\1\162\1\56\1\236\73\56"+
    "\1\162\1\56\1\237\73\56\1\162\1\56\1\240\73\56"+
    "\1\162\1\56\1\241\73\56\1\162\1\56\1\242\73\56"+
    "\1\162\1\56\1\243\73\56\1\162\1\56\1\244\73\56"+
    "\1\162\1\56\1\245\73\56\1\162\1\56\1\246\73\56"+
    "\1\162\1\56\1\247\73\56\1\162\1\56\1\250\73\56"+
    "\1\162\1\56\1\251\73\56\1\162\1\56\1\252\73\56"+
    "\1\162\1\56\1\253\73\56\1\162\1\56\1\254\73\56"+
    "\1\162\1\56\1\255\73\56\1\162\1\56\1\256\73\56"+
    "\1\162\1\56\1\257\73\56\1\162\1\56\1\260\73\56"+
    "\1\162\1\56\1\261\73\56\1\162\1\56\1\262\73\56"+
    "\1\162\1\56\1\263\73\56\1\162\1\56\1\264\73\56"+
    "\1\162\1\56\1\265\73\56\1\162\1\56\1\266\73\56"+
    "\1\162\1\56\1\267\73\56\1\162\1\56\1\270\73\56"+
    "\1\162\1\56\1\271\73\56\1\162\1\56\1\272\73\56"+
    "\1\162\1\56\1\273\73\56\1\162\1\56\1\274\73\56"+
    "\1\162\1\56\1\275\73\56\1\162\1\56\1\276\73\56"+
    "\1\162\1\56\1\277\73\56\1\162\1\56\1\300\73\56"+
    "\1\162\1\56\1\301\73\56\1\162\1\56\1\302\73\56"+
    "\1\162\1\56\1\303\73\56\1\162\1\56\1\304\73\56"+
    "\1\162\1\56\1\305\73\56\1\162\1\56\1\306\73\56"+
    "\1\162\1\56\1\307\73\56\1\162\1\56\1\310\73\56"+
    "\1\162\1\56\1\311\73\56\1\162\1\56\1\312\73\56"+
    "\1\162\1\56\1\313\73\56\1\162\1\56\1\314\73\56"+
    "\1\162\1\56\1\315\73\56\1\162\1\56\1\316\73\56"+
    "\1\162\1\56\1\317\73\56\1\162\1\56\1\320\73\56"+
    "\1\162\1\56\1\321\73\56\1\162\1\56\1\322\73\56"+
    "\1\162\1\56\1\323\73\56\1\162\1\56\1\324\73\56"+
    "\1\162\1\56\1\325\73\56\1\162\1\56\1\326\73\56"+
    "\1\162\1\56\1\327\73\56\1\162\1\56\1\330\73\56"+
    "\1\162\1\56\1\331\73\56\1\162\1\56\1\332\73\56"+
    "\1\162\1\56\1\333\73\56\1\162\1\56\1\334\73\56"+
    "\1\162\1\56\1\335\73\56\1\162\1\56\1\336\73\56"+
    "\1\162\1\56\1\337\73\56\1\162\1\56\1\340\73\56"+
    "\1\162\1\56\1\341\73\56\1\162\1\56\1\342\73\56"+
    "\1\162\1\56\1\343\73\56\1\162\1\56\1\344\73\56"+
    "\1\162\1\56\1\345\73\56\1\162\1\56\1\346\73\56"+
    "\1\162\1\56\1\347\73\56\1\162\1\56\1\350\73\56"+
    "\1\162\1\56\1\351\73\56\1\162\1\56\1\352\73\56"+
    "\1\162\1\56\1\353\73\56\1\162\74\56";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11904];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\5\1\1\11\13\1\1\11"+
    "\1\1\5\11\11\1\2\11\1\1\5\11\2\1\2\0"+
    "\1\1\1\11\5\1\1\11\12\1\6\11\1\0\3\11"+
    "\1\1\3\0\1\11\1\1\1\11\1\1\1\0\12\1"+
    "\4\11\15\1\1\0\3\1\1\0\165\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  //helper
  long yychar = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _RLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(YYINITIAL); return R_EOL;
            } 
            // fall through
          case 60: break;
          case 2: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 61: break;
          case 3: 
            { yybegin(YYINITIAL); return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 62: break;
          case 4: 
            { yybegin(YYINITIAL); return R_COMMENT;
            } 
            // fall through
          case 63: break;
          case 5: 
            { yybegin(YYINITIAL); return RTypes.R_SYMBOL;
            } 
            // fall through
          case 64: break;
          case 6: 
            { return R_NUM_CONST;
            } 
            // fall through
          case 65: break;
          case 7: 
            { return R_ARITH_PLUS;
            } 
            // fall through
          case 66: break;
          case 8: 
            { yybegin(YYINITIAL); return RTypes.R_STR_CONST;
            } 
            // fall through
          case 67: break;
          case 9: 
            { yybegin(YYINITIAL); return RTypes.R_SEMICOLON;
            } 
            // fall through
          case 68: break;
          case 10: 
            { yybegin(YYINITIAL); return R_COLON;
            } 
            // fall through
          case 69: break;
          case 11: 
            { yybegin(YYINITIAL); return R_COMMA;
            } 
            // fall through
          case 70: break;
          case 12: 
            { yybegin(YYINITIAL); return RTypes.R_LEFT_PAREN;
            } 
            // fall through
          case 71: break;
          case 13: 
            { yybegin(YYINITIAL); return RTypes.R_RIGHT_PAREN;
            } 
            // fall through
          case 72: break;
          case 14: 
            { yybegin(YYINITIAL); return RTypes.R_LEFT_BRACE;
            } 
            // fall through
          case 73: break;
          case 15: 
            { yybegin(YYINITIAL); return RTypes.R_RIGHT_BRACE;
            } 
            // fall through
          case 74: break;
          case 16: 
            { yybegin(YYINITIAL); return RTypes.R_LEFT_BRACKET;
            } 
            // fall through
          case 75: break;
          case 17: 
            { yybegin(YYINITIAL); return RTypes.R_RIGHT_BRACKET;
            } 
            // fall through
          case 76: break;
          case 18: 
            { return R_NEGATION;
            } 
            // fall through
          case 77: break;
          case 19: 
            { return R_EQ_ASSIGN;
            } 
            // fall through
          case 78: break;
          case 20: 
            { return R_GT;
            } 
            // fall through
          case 79: break;
          case 21: 
            { return R_LT;
            } 
            // fall through
          case 80: break;
          case 22: 
            { return R_AND;
            } 
            // fall through
          case 81: break;
          case 23: 
            { return R_OR;
            } 
            // fall through
          case 82: break;
          case 24: 
            { return R_ARITH_MINUS;
            } 
            // fall through
          case 83: break;
          case 25: 
            { return R_TILDE;
            } 
            // fall through
          case 84: break;
          case 26: 
            { return R_ARITH_MULT;
            } 
            // fall through
          case 85: break;
          case 27: 
            { return R_ARITH_MOD;
            } 
            // fall through
          case 86: break;
          case 28: 
            { return R_ARITH_DIV;
            } 
            // fall through
          case 87: break;
          case 29: 
            { return R_ARITH_EXPONENTIAION;
            } 
            // fall through
          case 88: break;
          case 30: 
            { return R_LIST_SUBSET;
            } 
            // fall through
          case 89: break;
          case 31: 
            { return R_SLOT;
            } 
            // fall through
          case 90: break;
          case 32: 
            { return R_QUESTION;
            } 
            // fall through
          case 91: break;
          case 33: 
            { return R_IF;
            } 
            // fall through
          case 92: break;
          case 34: 
            { return R_IN;
            } 
            // fall through
          case 93: break;
          case 35: 
            { yybegin(YYINITIAL); return RTypes.R_NS_GET;
            } 
            // fall through
          case 94: break;
          case 36: 
            { yybegin(YYINITIAL); return RTypes.R_LBB;
            } 
            // fall through
          case 95: break;
          case 37: 
            { yybegin(YYINITIAL); return RTypes.R_RBB;
            } 
            // fall through
          case 96: break;
          case 38: 
            { return R_NE;
            } 
            // fall through
          case 97: break;
          case 39: 
            { return R_EQ;
            } 
            // fall through
          case 98: break;
          case 40: 
            { return R_GE;
            } 
            // fall through
          case 99: break;
          case 41: 
            { return R_LE;
            } 
            // fall through
          case 100: break;
          case 42: 
            { return R_LEFT_ASSIGN;
            } 
            // fall through
          case 101: break;
          case 43: 
            { return R_AND2;
            } 
            // fall through
          case 102: break;
          case 44: 
            { return R_OR2;
            } 
            // fall through
          case 103: break;
          case 45: 
            { return R_RIGHT_ASSIGN;
            } 
            // fall through
          case 104: break;
          case 46: 
            { return R_SYMBOL_FORMALS;
            } 
            // fall through
          case 105: break;
          case 47: 
            { return R_FOR;
            } 
            // fall through
          case 106: break;
          case 48: 
            { yybegin(YYINITIAL); return RTypes.R_NS_GET_INT;
            } 
            // fall through
          case 107: break;
          case 49: 
            { return R_GLOBAL_LEFT_ASSIGN;
            } 
            // fall through
          case 108: break;
          case 50: 
            { return R_GLOBAL_RIGHT_ASSIGN;
            } 
            // fall through
          case 109: break;
          case 51: 
            { return R_ARITH_MISC;
            } 
            // fall through
          case 110: break;
          case 52: 
            { return R_NEXT;
            } 
            // fall through
          case 111: break;
          case 53: 
            { return R_ELSE;
            } 
            // fall through
          case 112: break;
          case 54: 
            { return R_NULL_CONST;
            } 
            // fall through
          case 113: break;
          case 55: 
            { return R_WHILE;
            } 
            // fall through
          case 114: break;
          case 56: 
            { return R_BREAK;
            } 
            // fall through
          case 115: break;
          case 57: 
            { return R_REPEAT;
            } 
            // fall through
          case 116: break;
          case 58: 
            { yybegin(YYINITIAL); return R_SECTION_COMMENT;
            } 
            // fall through
          case 117: break;
          case 59: 
            { return R_FUNCTION;
            } 
            // fall through
          case 118: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
